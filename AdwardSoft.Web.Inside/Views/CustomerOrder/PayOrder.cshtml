@{
    ViewData["Title"] = "Thanh toán đơn hàng";
}

<div class="row">
    <div class="col-12">
        <div class="card">

            <div class="card-header">
                <h5 class="card-title">Danh sách đơn hàng</h5>

                <div class="card-header header-elements-md-inline">
                    <div class="row mr-2">
                        <div class="col-md-auto">
                            <button 
                                id="btnAutoPayOrder"
                                type="button"
                                class="btn btn-medium btn-primary modal-link"
                            >
                                <i class="fas fa-check mr-1"></i>
                                <span class="hidden-xs">Thanh toán tự động</span>
                            </button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-auto float-right">
                            <label for="from-date" class="clear-fix font-weight-semibold">Từ ngày</label>

                            <div class="form-group-feedback form-group-feedback-left ">
                                <input id="from-date"
                                       name="from-date"
                                       type="text"
                                       class="form-control"
                                >

                                <div class="form-control-feedback">
                                    <label for="from-date">
                                        <i class="icon-calendar22"></i>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-auto float-right">
                            <label for="to-date" class="clear-fix font-weight-semibold">Đến ngày</label>

                            <div class="form-group-feedback form-group-feedback-left ">
                                <input id="to-date"
                                       name="to-date"
                                       type="text"
                                       class="form-control"
                                >

                                <div class="form-control-feedback">
                                    <label for="to-date">
                                        <i class="icon-calendar22"></i>
                                    </label>
                                </div>
                            </div>
                        </div>


                        <div class="col-md-auto float-right">
                            <label for="payment-status-select" class="clear-fix font-weight-semibold">Trạng thái thanh toán</label>
                            <select id="payment-status-select" class="form-control select">
                                <option value="255" selected>Tất cả</option>
                                <option value="0">Chưa thanh toán</option>
                                <option value="1" disabled>Đã thanh toán</option>
                                <option value="2">Từ chối</option>
                            </select>
                        </div>
                    </div>
                </div>

            </div>

            <div class="card-body">
                <table id="CustomerOrderTable" class="table datatable-save-state w-100">
                    <thead>
                        <tr>
                            <th>Mã đơn hàng</th>
                            <th>Ngày đặt hàng</th>
                            <th>Người nhận hàng</th>
                            <th>Số lượng đăng ký</th>
                            <th>Thành tiền</th>
                            <th>Thanh toán</th>
                            <th>Trạng thái</th>
                            <th class="text-center text-muted" style="width: 30px;"><i class="icon-checkmark3"></i></th>
                        </tr>
                    </thead>

                    <tbody>

                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* ------------- Utility Function ------------- *@
    <script>
        function datePickerValue2SQLDate(date) {
            const splitedDate = date.split("/");

            return `${splitedDate[2]}-${splitedDate[1]}-${splitedDate[0]}`;
        }
    </script>

    @* ------------- JS Redender ------------- *@
    <script id="CustomerOrderAction" type="text/x-jsrender">
        <div class="list-icons">
            <div class="list-icons-item dropdown">
                <a 
                    href="#" 
                    class="list-icons-item dropdown-toggle caret-0" 
                    data-toggle="dropdown"
                >
                    <i class="icon-menu9"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right">
                    @* -- Pay Order -- *@
                    <a 
                        href="@Url.Action("Order","CustomerOrder")"
                        onclick="handleOnClickPayOrder(event)";
                        class="dropdown-item modal-link" 
                        data-params='{"id":"{{:id}}", "paymentStatus": "{{:paymentStatus}}"}'
                    >
                        <i class="icon-pencil7" data-toggle="tooltip" title="@EText.TooltipEdit.GetDescription()" ></i>
                        Thanh toán
                    </a>
                </div>
            </div>
        </div>
    </script>

    @* ------------- Handle Main Business ------------- *@
    <script>
        let $CustomerOrderTable;
        const CustomerOrderAction = $.templates("#CustomerOrderAction");

        const $fromDate = $("#from-date");
        const $toDate = $("#to-date");
        const $paymentStatusSelect = $("#payment-status-select");
        const $btnAutoPayOrder = $("#btnAutoPayOrder");

        // Apply Some JQuery UI Elements
        $(document).ready(function () {
            $paymentStatusSelect.select2();
            
            $fromDate.daterangepicker({
                singleDatePicker: true,
                timePicker: false,
                minDate: '01-01-1910',
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY'
                },
                yearPicker: true
            });

            $toDate.daterangepicker({
                singleDatePicker: true,
                timePicker: false,
                minDate: '01-01-1910',
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY'
                },
                yearPicker: true
            });

            // setTimeout(rebindValidation, 500)
        })

        var rebindValidation = function () {
            $('form').each(function (i, f) {
                $form = $(f)
                $form.removeData('validator')
                $form.removeData('unobtrusiveValidation')
                $.validator.unobtrusive.parse($form)
            });

            $('.select-search').select2();
        }

        $CustomerOrderTable = $("#CustomerOrderTable").DataTable({
            processing: true,
            responsive: true,
            ajax: function (data, callback, settings) {
                // Prevent Submit Undefined and empty value
                if (!$toDate.val() || !$fromDate.val()) {
                    return;
                }

                $.ajax({
                    data: {
                        "model": data,
                        "paymentStatus": $paymentStatusSelect.val(),
                        "fromDate": datePickerValue2SQLDate($fromDate.val()),
                        "toDate": datePickerValue2SQLDate($toDate.val())
                    },
                    url: "@Url.Action("ReadDataTable", "CustomerOrder")",
                    method: "POST",
                    success: function (response) {
                        console.log("Response: ", response);
                        callback(
                            { 
                                data: response.data, 
                                draw: response.draw, 
                                recordsFiltered: response.recordsFiltered, 
                                recordsTotal: response.recordsTotal 
                            }
                        );
                        // $('.popup-over').popover()
                    },
                    error: function (error) {
                        console.log(error)
                    }
                })
            },
            pageLength: 10,
            paging: true,
            serverSide: true,
            cache: false,
            lengthChange: false,
            filter: true,
            search: true,
            order: false,
            columns: [
                { 
                    data: "id",
                    render: function(data, type, row) {
                        let isDisabled = false;

                        if (row.paymentStatus != 0) {
                            isDisabled = true;
                        }

                        return `<div class="checkbox-wrapper d-flex">
                                    <input class="pay-oder-automatic" ${isDisabled && "disabled"} type="checkbox" data-id="${data}" id="order-${data}">
                                    <label class="pay-oder-automatic-label ml-2 mb-0" for="order-${data}">
                                        ${data}
                                    </label>
                                </div>`
                    }
                },
                { 
                    data: "date",
                    render: function (data, type, row) {
                        const date = new Date(data);

                        let year = date.getFullYear();
                        let month = (1 + date.getMonth()).toString().padStart(2, '0');
                        let day = date.getDate().toString().padStart(2, '0');

                        return month + '/' + day + '/' + year;
                    }
                },
                { 
                    data: "customerName" 
                },
                {
                    data: "totalQuantity",
                    render: function (data, type, row) {
                        return FormatCurrency(data);
                    }
                },
                {
                    data: "totalAmount",
                    render: function(data, type, row) {
                        return FormatCurrency(data) + " VNĐ";
                    }
                },
                { 
                    data: "paymentStatus",
                    render: function(data, type, row) {
                        const PaymentStatus = {
                            "0": "<span class='text-warning'>@ECustomerOrderPaymentStatus.PAYMENT_STATUS_UNPAY.Description()</span>",
                            "1": "<span class='text-success'>@ECustomerOrderPaymentStatus.PAYMENT_STATUS_PAID.Description()</span>",
                            "2": "<span class='text-danger'>@ECustomerOrderPaymentStatus.PAYMENT_STATUS_DECLINE.Description()</span>",
                        }                    
                        return PaymentStatus[data];
                    }
                },
                {
                    data: "status",
                    render: function (data, type, row) {
                        const Status = {
                            "0": "<span class='text-primary'>@ECustomerOrderStatus.STATUS_DONE.Description()</span>",

                            "1": "<span class='text-info'>@ECustomerOrderStatus.STATUS_INPROGRESS.Description()</span>",

                            "2": "<span class='text-success'>@ECustomerOrderStatus.STATUS_DELIVERED.Description()</span>",

                            "3": "<span class='text-success'>@ECustomerOrderStatus.STATUS_COMPLETE.Description()</span>",

                            "4": "<span class='text-danger'>@ECustomerOrderStatus.STATUS_CANCELLED.Description()</span>",
                        }

                        return Status[data];
                    }
                },
                {
                    data: "id",
                    render: function (data, type, row) {
                        return (CustomerOrderAction.render({ id: data, paymentStatus: row.paymentStatus }))
                    }
                },
            ],
            language: {
                search: '<div class="row">_INPUT_</div>',
                searchPlaceholder: 'Tìm kiếm...',
                info: "<span style='padding-left:2%;'>Trang _PAGE_ / _PAGES_</span>",
                paginate: {
                    'first': 'Đầu',
                    'last': 'Cuối',
                    'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;',
                    'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;'
                },
                processing: "",
                infoEmpty: "",
                emptyTable: "@EText.EmptyTable.Description()",
                zeroRecords: "@EText.EmptyTable.Description()",
                infoFiltered: "",
                processing: "@EText.Processing.Description()",
            }
        });

        var CustomerOrderSuccess = function () {
            $CustomerOrderTable.ajax.reload()
        };
    </script>
    
    @* ------------- Events On Change ------------- *@
    <script>
        $fromDate.on('change', function (e) {
            $CustomerOrderTable.ajax.reload();
        });

        $toDate.on('change', function (e) {
            $CustomerOrderTable.ajax.reload();
        });

        $paymentStatusSelect.on('change', function (e) {
            $CustomerOrderTable.ajax.reload();
        });
    </script>


    @* ------------- Handle Auto Pay Order ------------- *@
    <script>
        function sendPayOrder(orderIds) {
            const data = {
                orderIDs: orderIds
            };

            $.ajax({
                url: '@Url.Action("PayOrder", "CustomerOrder")',
                method: "PUT",
                data: data,
                success: function (response) {
                    if (response.succeeded) {
                        new PNotify({
                            title: 'Thông báo',
                            text: response.customMessage,
                            addclass: 'bg-success border-success'
                        });

                        $CustomerOrderTable.ajax.reload();
                    } else {
                        new PNotify({
                            title: 'Thất bại',
                            text: response.customMessage,
                            addclass: 'bg-danger border-danger'
                        });
                    }
                },
                failure: function (response) {
                    new PNotify({
                        title: 'Thất bại',
                        text: 'Thanh toán không thành công',
                        addclass: 'bg-danger border-danger'
                    });
                },
                error: function (response) {
                    new PNotify({
                        title: 'Thất bại',
                        text: 'Thanh toán không thành công! ' + response.responseText,
                        addclass: 'bg-danger border-danger'
                    });
                }
            })
        }

        // Handle Auto Pay Order
        $btnAutoPayOrder.on("click", function(event){
            swal({
                title: 'Bạn có chắc chắn?',
                text: 'Bạn chắc chắn muốn thanh toán tự động tất cả đơn hàng đã chọn?',
                type: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Xác nhận!',
                cancelButtonText: 'Trở lại'
            }).then(function (check) {
                if (check.value) { 
                    const orderIDs = []
                 
                    // Get All CheckBox that have been checked
                    $("input[type='checkbox']:checked.pay-oder-automatic").each(function () {
                        orderIDs.push($(this).attr("data-id"));
                    });;
                    
                    if (orderIDs.length === 0 ) {
                        new PNotify({
                            title: 'Thông báo',
                            text: 'Vui lòng chọn đơn đặt hàng cần thanh toán!',
                            addclass: 'bg-warning border-warning'
                        });

                        return;
                    }

                    sendPayOrder(orderIDs);
                };
            });
        });
        
        // Handle Pay Order 
        function handleOnClickPayOrder(event) {
            event.preventDefault();
 
            swal({
                title: 'Bạn có chắc chắn?',
                text: 'Bạn chắc chắn muốn thanh toán đơn hàng?',
                type: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Xác nhận!',
                cancelButtonText: 'Trở lại'
            }).then(function (check) {
                if (check.value) {
                    let orderID = event.target.getAttribute("data-params");

                    if (!orderID) {
                        new PNotify({
                            title: 'Thông báo',
                            text: 'Không thể thánh toán vui lòng thử lại sau!',
                            addclass: 'bg-warning border-warning'
                        });

                        return;
                    };

                    try {
                        orderID = JSON.parse(orderID);

                        if (!orderID["id"]) {
                            new PNotify({
                                title: 'Thông báo',
                                text: 'Không thể thanh toán vui lòng thử lại sau!',
                                addclass: 'bg-warning border-warning'
                            });
                            return;
                        }

                        if (orderID["paymentStatus"] !== "0") {
                            new PNotify({
                                title: 'Thông báo',
                                text: 'Đơn hàng đã bị từ chối hoặc đã được thanh toán!',
                                addclass: 'bg-warning border-warning'
                            });
                            return;
                        }

                        sendPayOrder([orderID["id"]])
                    } catch(err) {
                        console.error(err);
                        new PNotify({
                            title: 'Thông báo',
                            text: 'Không thể thánh toán vui lòng thử lại sau!',
                            addclass: 'bg-warning border-warning'
                        });

                        return;
                    };               
                };
            });
        }
    </script>
}


