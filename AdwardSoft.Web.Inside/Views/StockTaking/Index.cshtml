@model StockTakingDatatableViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Stock Taking";

    var Stocks = @ViewBag.Stocks;
    var Products = @ViewBag.Products;
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Stock Taking List</h5>
                <div class="card-header header-elements-md-inline">
                    <div class="row">
                        <div class="col-md-auto">
                            <a href="@Url.Action("_Form","StockTaking")" checkvalidate="true" modal-size="modal-lg" class="btn btn-medium btn-primary modal-link">
                                <i class="icon-plus22 mr-1"></i><span class="hidden-xs">Import from Barcode</span>
                            </a>
                        </div>
                        <div class="col-md-auto">
                            <a href="@Url.Action("_FormExcel", "StockTaking")" checkvalidate="true" modal-size="modal-sm" class="btn btn-medium btn-primary modal-link" callbackfn="StockTakingSuccess()">
                                <i class="icon-plus22 mr-1"></i><span class="hidden-xs">Import from excel</span>
                            </a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-auto float-right">
                            <label class="clear-fix font-weight-semibold">Date</label>
                            <div class="form-group-feedback form-group-feedback-left ">
                                <input type="text" id="date-filter" class="form-control">
                                <div class="form-control-feedback">
                                    <i class="icon-calendar22"></i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-auto float-right">
                            <label class="clear-fix font-weight-semibold">Stock</label>
                            <select id="stock-select" class="form-control select-search" asp-items="Stocks">
                                <option value="0" selected>All</option>
                            </select>
                        </div>
                        <div class="col-md-auto float-right">
                            <label class="clear-fix font-weight-semibold">Product</label>
                            <select id="product-select" class="form-control select-search" asp-items="Products">
                                <option value="0" selected>All</option>
                            </select>
                        </div>
                        <div class="col-md-auto float-right">
                            <label class="clear-fix font-weight-semibold">*</label>
                            <a id="btn-lock" checkvalidate="true" modal-size="modal-sm" class="btn btn-info disabled" style="width: 100%">
                                <i class="fas fa-lock text-white" data-toggle="tooltip" title="Lock"></i>
                            </a>
                            <a id="btn-unlock" checkvalidate="true" modal-size="modal-sm" class="btn btn-info disabled" style="display: none; width: 100%">
                                <i class="fas fa-unlock text-white" data-toggle="tooltip" title="Unlock"></i>
                            </a>
                        </div>
                        <div class="col-md-auto float-right">
                            <label class="clear-fix font-weight-semibold">*</label>
                            <a id="btn-delete-all" checkvalidate="true" modal-size="modal-sm" class="btn btn-danger disabled" style="width: 100%">
                                <i class="fas fa-trash-alt text-white" data-toggle="tooltip" title="Delete all"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <table id="StockTakingTable" class="table datatable-save-state w-100">
                    <thead>
                        <tr>
                            <th width="25%">Product</th>
                            <th width="20%">Stock</th>
                            <th width="20%">Unit</th>
                            <th width="15%">Quantity</th>
                            <th width="15%">Forward</th>
                            <th width="5%">
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script id="StockTakingAction" type="text/x-jsrender">
        {{if !data.isLock}}
        <div class="list-icons">
            <div class="list-icons-item dropdown">
                <a href="#" class="list-icons-item dropdown-toggle caret-0" data-toggle="dropdown"><i class="icon-menu9"></i></a>
                <div class="dropdown-menu dropdown-menu-right">
                    <a href="/StockTaking/_FormEditQuantity?productId={{:data.productId}}&stockId={{:data.stockId}}&date={{:data.date}}" callbackfn="StockTakingSuccess()" checkvalidate="true" modal-size="modal-sm" class="dropdown-item modal-link" >
                        <i class="icon-pencil7" data-toggle="tooltip" title="@EText.TooltipEdit.Description() Quantity"></i>
                        @EText.Edit.Description() Quantity
                    </a>

                    <a href="#" class="dropdown-item remove-item" data-action="/StockTaking/Delete" callbackfn="StockTakingSuccess()" data-params='{"productId":"{{:data.productId}}", "stockId":"{{:data.stockId}}", "date":"{{:data.date}}"}'>
                        <i class="icon-trash" data-toggle="tooltip" title="@EText.TooltipRemove.Description()"></i>
                        @EText.Remove.Description()
                    </a>

                </div>
            </div>
        </div>
        {{/if}}
    </script>
    <script>
        var $StockSelect = $('#stock-select')
        var $ProductSelect = $('#product-select')
        var $DateFilter = $('#date-filter')
        var StockTakingAction = $.templates("#StockTakingAction")
        var $StockTakingTable

        $DateFilter.daterangepicker({
            applyClass: 'bg-slate-600',
            cancelClass: 'btn-light',
            singleDatePicker: false,
            timePicker: false,
            autoclose: true,
            opens: 'right',
            minDate: '01-01-1910',
            maxDate: new Date(),
            locale: {
                format: 'DD/MM/YYYY'
            }
        })

        $StockTakingTable = $("#StockTakingTable").DataTable({
            processing: true,
            responsive: true,
            ajax: function (data, callback, settings) {
                $.ajax({
                    data: {
                        "model": data,
                        "date": $DateFilter.val(),
                        "stockId": $StockSelect.val(),
                        "productId": $ProductSelect.val()
                    },
                    url: "@Url.Action("Read", "StockTaking")",
                    method: "POST",
                    success: function (response) {
                        callback({ data: response.data, draw: response.draw, recordsFiltered: response.recordsFiltered, recordsTotal: response.recordsTotal });
                    }
                })
            },
            pageLength: 10,
            paging: true,
            serverSide: true,
            cache: false,
            lengthChange: false,
            filter: true,
            search: true,
            order: false,
            columns: [
                {
                    data: null,
                    render: function (data, type, row) {

                        return `<div class="d-flex align-items-center">
							        <div>
								        <a href="#" class="text-default font-weight-semibold letter-icon-title">${data.productName}</a>
								        <div class="text-muted font-size-sm">${data.productCode}</div>
							        </div>
						        </div>`
                    }
                },
                { data: "stockName" },
                { data: "unitName" },
                { data: "quantity" },
                {
                    data: "isForward",
                    render: (data, type, row) => data === true ? '<p class="text-info"><i class="icon-checkmark3"></i></p>' : ""
                },
                {
                    data: null,
                    render: function (data, type, row) {
                        return (StockTakingAction.render({ data: data }));
                    }
                },
            ],
            language: {
                search: '<div class="row">_INPUT_</div>',
                searchPlaceholder: 'search...',
                info: "<span style='padding-left:2%;'>Page _PAGE_ / _PAGES_</span>",
                paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' },
                processing: "",
                infoEmpty: "",
                emptyTable: "@EText.EmptyTable.Description()",
                zeroRecords: "@EText.EmptyTable.Description()",
                infoFiltered: "",
                processing: "@EText.Processing.Description()",
            }
        })

        var StockTakingSuccess = function () {
            $StockTakingTable.ajax.reload();
            _handlerLockEvent()
            _handlerDeleteEvent()
        }

        var StockTakingUpdateSucess = function () {
            var tmp = $StockTakingTable.page();
            $StockTakingTable.ajax.reload();
            $StockTakingTable.page(tmp).draw('page');
        }

        $(document).ready(function () {
            $(function () {
                $("#titlePage").text('Stock Taking')
            });
            $('.select').select2({
                minimumResultsForSearch: Infinity
            })
            $('.form-check-input-switch').bootstrapSwitch();
            $('.select-search').select2();
            $('.daterange').daterangepicker({
                applyClass: 'bg-slate-600',
                cancelClass: 'btn-light',
                singleDatePicker: false,
                timePicker: false,
                autoclose: true,
                opens: 'right',
                locale: {
                    format: 'DD/MM/YYYY'
                }
            });
            setTimeout(rebindValidation, 500);
        });

        var rebindValidation = function () {
            $('form').each(function (i, f) {
                $form = $(f);
                $form.removeData('validator');
                $form.removeData('unobtrusiveValidation');
                $.validator.unobtrusive.parse($form);
            });
        }

        function _checkIsLock() {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '@Url.Action("CheckIsLock", "StockTaking")',
                    method: "GET",
                    data: {
                        "stockId": $StockSelect.val(),
                        "date": $DateFilter.val().split("-")[0].trim()
                    },
                    success: function (data) {
                        resolve(data)
                    },
                    error: function (error) {
                        reject(error)
                    },
                })
            })
        }

        function _checkIsForward() {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '@Url.Action("CheckIsForward", "StockTaking")',
                    method: "GET",
                    data: {
                        "stockId": $StockSelect.val(),
                        "date": $DateFilter.val().split("-")[0].trim()
                    },
                    success: function (data) {
                        resolve(data)
                    },
                    error: function (error) {
                        reject(error)
                    },
                })
            })
        }

        function _checkDate() {
            var splited = $DateFilter.val().split("-")
            var isOneDay = splited[0].trim() == splited[1].trim()

            return isOneDay
        }

        function _checkStock() {
            return $StockSelect.val() > 0
        }

        function _checkHaveData() {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '@Url.Action("CheckHaveData", "StockTaking")',
                    method: "GET",
                    data: {
                        "stockId": $StockSelect.val(),
                        "date": $DateFilter.val().split("-")[0].trim()
                    },
                    success: function (data) {
                        resolve(data)
                    },
                    error: function (error) {
                        reject(error)
                    },
                })
            })
        }

    </script>

    @* ------ Events ------ *@

    <script>
        $DateFilter.on('change', function (e) {
            $StockTakingTable.ajax.reload()
        })

        $StockSelect.on('change', function (e) {
            $StockTakingTable.ajax.reload()
        })

        $ProductSelect.on('change', function (e) {
            $StockTakingTable.ajax.reload()
        })

    </script>

    @* ------ Lock Events ------ *@

    <script>

        var ButtonUnlock = {
            $BtnUnlock: $('#btn-unlock'),
            _ShowButtonUnlock: function () {
                this.$BtnUnlock.show()
            },
            _HideButtonUnlock: function () {
                this.$BtnUnlock.hide()
            },
            _DisableButtonUnlock: function () {
                this.$BtnUnlock.addClass("disabled")
                this.$BtnUnlock.attr('disabled', true)
            },
            _AbleButtonUnlock: function () {
                this.$BtnUnlock.removeClass("disabled")
                this.$BtnUnlock.removeAttr('disabled')
            }
        }

        var ButtonLock = {
            $BtnLock: $('#btn-lock'),
            _ShowButtonLock: function () {
                this.$BtnLock.show()
            },
            _HideButtonLock: function () {
                this.$BtnLock.hide()
            },
            _DisableButtonLock: function () {
                this.$BtnLock.addClass("disabled")
                this.$BtnLock.attr('disabled', true)
            },
            _AbleButtonLock: function () {
                this.$BtnLock.removeClass("disabled")
                this.$BtnLock.removeAttr('disabled')
            }
        }

        $(document).ready(function () {
            _handlerLockEvent()
        })

        async function _handlerLockEvent() {
            var isOneDay = _checkDate()
            var isOneStock = _checkStock()
            var isHaveData = await _checkHaveData()
            if (isOneDay && isOneStock && (isHaveData > 0)) {

                var isLock = await _checkIsLock()

                if (isLock > 0) {
                    // => is lock

                    // => Check is Forward
                    var isForward = await _checkIsForward()

                    if (isForward > 0) {
                        // => is forward thorw alert
                        new PNotify({
                            title: 'Warning',
                            text: 'This content have been <b>forward</b>, cannot unlock !',
                            icon: 'icon-warning22'
                        });

                        ButtonLock._HideButtonLock()
                        ButtonUnlock._ShowButtonUnlock()
                        ButtonUnlock._DisableButtonUnlock()
                    } else {
                        ButtonLock._HideButtonLock()
                        ButtonUnlock._ShowButtonUnlock()
                        ButtonUnlock._AbleButtonUnlock()
                    }
                }
                else {
                    // => is unlock
                    ButtonUnlock._HideButtonUnlock()
                    ButtonLock._ShowButtonLock()
                    ButtonLock._AbleButtonLock()
                }
            } else {
                ButtonLock._DisableButtonLock()
                ButtonUnlock._DisableButtonUnlock()
            }
        }

        ButtonLock.$BtnLock.on('click', function (e) {
            e.preventDefault()

            swal({
                title: 'Are you sure ?',
                text: 'Are you sure lock the content.',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Confirm!',
                cancelButtonText: 'Back'
            }).then(function (check) {
                if (check.value) {
                    $.ajax({
                        url: '@Url.Action("Lock", "StockTaking")',
                        method: "PUT",
                        data: {
                            "stockId": $StockSelect.val(),
                            "date": $DateFilter.val().split("-")[0].trim()
                        },
                        success: function (data) {
                            if (data > 0) {
                                _handlerLockEvent()
                                _handlerDeleteEvent()
                                $StockTakingTable.ajax.reload()
                            }
                        }
                    })
                }
            })
        })

        ButtonUnlock.$BtnUnlock.on('click', function (e) {
            e.preventDefault()

            swal({
                title: 'Are you sure ?',
                text: 'Are you sure unlock the content.',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Confirm!',
                cancelButtonText: 'Back'
            }).then(function (check) {
                if (check.value) {
                    $.ajax({
                        url: '@Url.Action("Unlock", "StockTaking")',
                        method: "PUT",
                        data: {
                            "stockId": $StockSelect.val(),
                            "date": $DateFilter.val().split("-")[0].trim()
                        },
                        success: function (data) {
                            if (data > 0) {
                                _handlerLockEvent()
                                _handlerDeleteEvent()
                                $StockTakingTable.ajax.reload()
                            }

                        }
                    })
                }
            })
        })

        $DateFilter.on('change', function (e) {
            _handlerLockEvent()
        })

        $StockSelect.on('change', function (e) {
            _handlerLockEvent()
        })

    </script>

    @* ------ Delete Events ------ *@

    <script>

        var DeleteButton = {
            obj: $('#btn-delete-all'),
            _disable: function () {
                this.obj.addClass("disabled")
                this.obj.attr('disabled', true)
            },
            _able: function () {
                this.obj.removeClass("disabled")
                this.obj.removeAttr('disabled')
            }
        }

        $(document).ready(function () {
            _handlerDeleteEvent()
        })

        async function _handlerDeleteEvent() {
            var isOneDay = _checkDate()
            var isOneStock = _checkStock()
            var haveData = await _checkHaveData()

            // => Check is one
            if (isOneDay && isOneStock && (haveData > 0)) {
                // Check is lock
                var isLock = await _checkIsLock()

                if (isLock <= 0) {
                    DeleteButton._able()
                }
                else {
                    DeleteButton._disable()
                }
            } else {
                DeleteButton._disable()
            }
        }

        $DateFilter.on('change', function (e) {
            _handlerDeleteEvent()
        })

        $StockSelect.on('change', function (e) {
            _handlerDeleteEvent()
        })

        DeleteButton.obj.on('click', function (e) {
            e.preventDefault()

            swal({
                title: 'Are you sure ?',
                text: 'Are you sure delete all.',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Confirm!',
                cancelButtonText: 'Back'
            }).then(function (check) {
                if (check.value) {
                    $.ajax({
                        url: '@Url.Action("DeleteAll", "StockTaking")',
                        method: "POST",
                        data: {
                            "stockId": $StockSelect.val(),
                            "date": $DateFilter.val().split("-")[0].trim()
                        },
                        success: function (data) {
                            _handlerLockEvent()
                            _handlerDeleteEvent()
                            $StockTakingTable.ajax.reload()
                        }
                    })
                }
            })
        })

    </script>
}
